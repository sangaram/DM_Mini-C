
** Conflict (shift/reduce) in state 7.
** Tokens involved: INT BOOL
** The following explanations concentrate on token INT.
** This state is reached from prog after reading:

var_decl 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
(?)

** In state 7, looking ahead at INT, reducing production
** list(var_decl) -> 
** is permitted because of the following sub-derivation:

list(var_decl) list(fun_def) EOF // lookahead token appears because list(fun_def) can begin with INT
var_decl list(var_decl) // lookahead token is inherited
         . 

** In state 7, looking ahead at INT, shifting is permitted
** because of the following sub-derivation:

list(var_decl) list(fun_def) EOF 
var_decl list(var_decl) 
         var_decl list(var_decl) 
         . INT IDENT SEMI 

** Conflict (shift/reduce) in state 0.
** Tokens involved: INT BOOL
** The following explanations concentrate on token INT.
** This state is reached from prog after reading:



** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
(?)

** In state 0, looking ahead at INT, reducing production
** list(var_decl) -> 
** is permitted because of the following sub-derivation:

list(var_decl) list(fun_def) EOF // lookahead token appears because list(fun_def) can begin with INT
. 

** In state 0, looking ahead at INT, shifting is permitted
** because of the following sub-derivation:

list(var_decl) list(fun_def) EOF 
var_decl list(var_decl) 
. INT IDENT SEMI 
