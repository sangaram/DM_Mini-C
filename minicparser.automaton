State 0:
prog' -> . prog [ # ]
-- On VOID shift to state 1
-- On TAB shift to state 2
-- On INT shift to state 3
-- On BOOL shift to state 4
-- On var_decl_list shift to state 5
-- On var_decl shift to state 130
-- On typ shift to state 116
-- On prog shift to state 134
-- On END reduce production var_decl_list -> 

State 1:
typ -> VOID . [ IDENT ]
-- On IDENT reduce production typ -> VOID 

State 2:
typ -> TAB . [ IDENT ]
-- On IDENT reduce production typ -> TAB 

State 3:
typ -> INT . [ IDENT ]
-- On IDENT reduce production typ -> INT 

State 4:
typ -> BOOL . [ IDENT ]
-- On IDENT reduce production typ -> BOOL 

State 5:
prog -> var_decl_list . END fun_def_list EOF [ # ]
-- On END shift to state 6

State 6:
prog -> var_decl_list END . fun_def_list EOF [ # ]
-- On fun_def_list shift to state 7
-- On VOID reduce production fun_def_list -> 
-- On TAB reduce production fun_def_list -> 
-- On INT reduce production fun_def_list -> 
-- On EOF reduce production fun_def_list -> 
-- On BOOL reduce production fun_def_list -> 

State 7:
fun_def_list -> fun_def_list . fun_def [ VOID TAB INT EOF BOOL ]
prog -> var_decl_list END fun_def_list . EOF [ # ]
-- On VOID shift to state 1
-- On TAB shift to state 2
-- On INT shift to state 3
-- On EOF shift to state 8
-- On BOOL shift to state 4
-- On typ shift to state 9
-- On fun_def shift to state 133

State 8:
prog -> var_decl_list END fun_def_list EOF . [ # ]
-- On # reduce production prog -> var_decl_list END fun_def_list EOF 

State 9:
fun_def -> typ . IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID TAB INT EOF BOOL ]
-- On IDENT shift to state 10

State 10:
fun_def -> typ IDENT . LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID TAB INT EOF BOOL ]
-- On LPAR shift to state 11

State 11:
fun_def -> typ IDENT LPAR . loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID TAB INT EOF BOOL ]
-- On INT shift to state 12
-- On BOOL shift to state 14
-- On separated_nonempty_list(COMMA,params) shift to state 16
-- On params shift to state 17
-- On loption(separated_nonempty_list(COMMA,params)) shift to state 20
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,params)) -> 

State 12:
params -> INT . IDENT [ RPAR COMMA ]
-- On IDENT shift to state 13

State 13:
params -> INT IDENT . [ RPAR COMMA ]
-- On RPAR reduce production params -> INT IDENT 
-- On COMMA reduce production params -> INT IDENT 

State 14:
params -> BOOL . IDENT [ RPAR COMMA ]
-- On IDENT shift to state 15

State 15:
params -> BOOL IDENT . [ RPAR COMMA ]
-- On RPAR reduce production params -> BOOL IDENT 
-- On COMMA reduce production params -> BOOL IDENT 

State 16:
loption(separated_nonempty_list(COMMA,params)) -> separated_nonempty_list(COMMA,params) . [ RPAR ]
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,params)) -> separated_nonempty_list(COMMA,params) 

State 17:
separated_nonempty_list(COMMA,params) -> params . [ RPAR ]
separated_nonempty_list(COMMA,params) -> params . COMMA separated_nonempty_list(COMMA,params) [ RPAR ]
-- On COMMA shift to state 18
-- On RPAR reduce production separated_nonempty_list(COMMA,params) -> params 

State 18:
separated_nonempty_list(COMMA,params) -> params COMMA . separated_nonempty_list(COMMA,params) [ RPAR ]
-- On INT shift to state 12
-- On BOOL shift to state 14
-- On separated_nonempty_list(COMMA,params) shift to state 19
-- On params shift to state 17

State 19:
separated_nonempty_list(COMMA,params) -> params COMMA separated_nonempty_list(COMMA,params) . [ RPAR ]
-- On RPAR reduce production separated_nonempty_list(COMMA,params) -> params COMMA separated_nonempty_list(COMMA,params) 

State 20:
fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,params)) . RPAR LACC var_decl_list list(instr) RACC [ VOID TAB INT EOF BOOL ]
-- On RPAR shift to state 21

State 21:
fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR . LACC var_decl_list list(instr) RACC [ VOID TAB INT EOF BOOL ]
-- On LACC shift to state 22

State 22:
fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC . var_decl_list list(instr) RACC [ VOID TAB INT EOF BOOL ]
-- On VOID shift to state 1
-- On TAB shift to state 2
-- On INT shift to state 3
-- On BOOL shift to state 4
-- On var_decl_list shift to state 23
-- On var_decl shift to state 130
-- On typ shift to state 116
-- On WHILE reduce production var_decl_list -> 
-- On RETURN reduce production var_decl_list -> 
-- On RACC reduce production var_decl_list -> 
-- On PUTCHAR reduce production var_decl_list -> 
-- On IF reduce production var_decl_list -> 
-- On IDENT reduce production var_decl_list -> 
-- On FOR reduce production var_decl_list -> 

State 23:
fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list . list(instr) RACC [ VOID TAB INT EOF BOOL ]
-- On WHILE shift to state 24
-- On RETURN shift to state 79
-- On PUTCHAR shift to state 81
-- On IF shift to state 85
-- On IDENT shift to state 90
-- On FOR shift to state 101
-- On simple_instr shift to state 110
-- On list(instr) shift to state 128
-- On instr shift to state 114
-- On RACC reduce production list(instr) -> 

State 24:
instr -> WHILE . LPAR expr RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On LPAR shift to state 25

State 25:
instr -> WHILE LPAR . expr RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 76

State 26:
expr -> NOT . expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 75

State 27:
expr -> LPAR . expr RPAR [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 73

State 28:
expr -> LHOOK . expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 68

State 29:
expr -> IDENT . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> IDENT . LHOOK expr RHOOK [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> IDENT . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On LPAR shift to state 30
-- On LHOOK shift to state 65
-- On SEMI reduce production expr -> IDENT 
-- On RPAR reduce production expr -> IDENT 
-- On RHOOK reduce production expr -> IDENT 
-- On RACC reduce production expr -> IDENT 
-- On PLUS reduce production expr -> IDENT 
-- On OR reduce production expr -> IDENT 
-- On NE reduce production expr -> IDENT 
-- On MOINS reduce production expr -> IDENT 
-- On MOD reduce production expr -> IDENT 
-- On LT reduce production expr -> IDENT 
-- On LE reduce production expr -> IDENT 
-- On GT reduce production expr -> IDENT 
-- On GE reduce production expr -> IDENT 
-- On FOIS reduce production expr -> IDENT 
-- On EQ reduce production expr -> IDENT 
-- On DIV reduce production expr -> IDENT 
-- On COMMA reduce production expr -> IDENT 
-- On AND reduce production expr -> IDENT 

State 30:
expr -> IDENT LPAR . loption(separated_nonempty_list(COMMA,expr)) RPAR [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On separated_nonempty_list(COMMA,expr) shift to state 33
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 34
-- On expr shift to state 36
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,expr)) -> 

State 31:
expr -> CST_B . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On SEMI reduce production expr -> CST_B 
-- On RPAR reduce production expr -> CST_B 
-- On RHOOK reduce production expr -> CST_B 
-- On RACC reduce production expr -> CST_B 
-- On PLUS reduce production expr -> CST_B 
-- On OR reduce production expr -> CST_B 
-- On NE reduce production expr -> CST_B 
-- On MOINS reduce production expr -> CST_B 
-- On MOD reduce production expr -> CST_B 
-- On LT reduce production expr -> CST_B 
-- On LE reduce production expr -> CST_B 
-- On GT reduce production expr -> CST_B 
-- On GE reduce production expr -> CST_B 
-- On FOIS reduce production expr -> CST_B 
-- On EQ reduce production expr -> CST_B 
-- On DIV reduce production expr -> CST_B 
-- On COMMA reduce production expr -> CST_B 
-- On AND reduce production expr -> CST_B 

State 32:
expr -> CST . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On SEMI reduce production expr -> CST 
-- On RPAR reduce production expr -> CST 
-- On RHOOK reduce production expr -> CST 
-- On RACC reduce production expr -> CST 
-- On PLUS reduce production expr -> CST 
-- On OR reduce production expr -> CST 
-- On NE reduce production expr -> CST 
-- On MOINS reduce production expr -> CST 
-- On MOD reduce production expr -> CST 
-- On LT reduce production expr -> CST 
-- On LE reduce production expr -> CST 
-- On GT reduce production expr -> CST 
-- On GE reduce production expr -> CST 
-- On FOIS reduce production expr -> CST 
-- On EQ reduce production expr -> CST 
-- On DIV reduce production expr -> CST 
-- On COMMA reduce production expr -> CST 
-- On AND reduce production expr -> CST 

State 33:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RPAR RACC ]
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
-- On RACC reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 

State 34:
expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) . RPAR [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On RPAR shift to state 35

State 35:
expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On SEMI reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On RPAR reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On RHOOK reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On RACC reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On PLUS reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On OR reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On NE reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On MOINS reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On MOD reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On LT reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On LE reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On GT reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On GE reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On FOIS reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On EQ reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On DIV reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On COMMA reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On AND reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 

State 36:
expr -> expr . PLUS expr [ RPAR RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOINS expr [ RPAR RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . FOIS expr [ RPAR RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . DIV expr [ RPAR RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOD expr [ RPAR RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LT expr [ RPAR RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LE expr [ RPAR RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GT expr [ RPAR RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GE expr [ RPAR RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . EQ expr [ RPAR RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . NE expr [ RPAR RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . AND expr [ RPAR RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . OR expr [ RPAR RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
separated_nonempty_list(COMMA,expr) -> expr . [ RPAR RACC ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAR RACC ]
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOINS shift to state 61
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On FOIS shift to state 57
-- On EQ shift to state 55
-- On DIV shift to state 59
-- On COMMA shift to state 63
-- On AND shift to state 41
-- On RPAR reduce production separated_nonempty_list(COMMA,expr) -> expr 
-- On RACC reduce production separated_nonempty_list(COMMA,expr) -> expr 

State 37:
expr -> expr PLUS . expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 38

State 38:
expr -> expr . PLUS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr PLUS expr . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOINS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . FOIS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOD expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . EQ expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . NE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On FOIS shift to state 57
-- On EQ shift to state 55
-- On DIV shift to state 59
-- On AND shift to state 41
-- On SEMI reduce production expr -> expr PLUS expr 
-- On RPAR reduce production expr -> expr PLUS expr 
-- On RHOOK reduce production expr -> expr PLUS expr 
-- On RACC reduce production expr -> expr PLUS expr 
-- On PLUS reduce production expr -> expr PLUS expr 
-- On MOINS reduce production expr -> expr PLUS expr 
-- On COMMA reduce production expr -> expr PLUS expr 

State 39:
expr -> expr OR . expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 40

State 40:
expr -> expr . PLUS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOINS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . FOIS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOD expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . EQ expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . NE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr OR expr . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On AND shift to state 41
-- On SEMI reduce production expr -> expr OR expr 
-- On RPAR reduce production expr -> expr OR expr 
-- On RHOOK reduce production expr -> expr OR expr 
-- On RACC reduce production expr -> expr OR expr 
-- On PLUS reduce production expr -> expr OR expr 
-- On OR reduce production expr -> expr OR expr 
-- On NE reduce production expr -> expr OR expr 
-- On MOINS reduce production expr -> expr OR expr 
-- On MOD reduce production expr -> expr OR expr 
-- On LT reduce production expr -> expr OR expr 
-- On LE reduce production expr -> expr OR expr 
-- On GT reduce production expr -> expr OR expr 
-- On GE reduce production expr -> expr OR expr 
-- On FOIS reduce production expr -> expr OR expr 
-- On EQ reduce production expr -> expr OR expr 
-- On DIV reduce production expr -> expr OR expr 
-- On COMMA reduce production expr -> expr OR expr 

State 41:
expr -> expr AND . expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 42

State 42:
expr -> expr . PLUS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOINS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . FOIS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOD expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . EQ expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . NE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr AND expr . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On SEMI reduce production expr -> expr AND expr 
-- On RPAR reduce production expr -> expr AND expr 
-- On RHOOK reduce production expr -> expr AND expr 
-- On RACC reduce production expr -> expr AND expr 
-- On PLUS reduce production expr -> expr AND expr 
-- On OR reduce production expr -> expr AND expr 
-- On NE reduce production expr -> expr AND expr 
-- On MOINS reduce production expr -> expr AND expr 
-- On MOD reduce production expr -> expr AND expr 
-- On LT reduce production expr -> expr AND expr 
-- On LE reduce production expr -> expr AND expr 
-- On GT reduce production expr -> expr AND expr 
-- On GE reduce production expr -> expr AND expr 
-- On FOIS reduce production expr -> expr AND expr 
-- On EQ reduce production expr -> expr AND expr 
-- On DIV reduce production expr -> expr AND expr 
-- On COMMA reduce production expr -> expr AND expr 
-- On AND reduce production expr -> expr AND expr 

State 43:
expr -> expr NE . expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 44

State 44:
expr -> expr . PLUS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOINS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . FOIS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOD expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . EQ expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . NE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr NE expr . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On OR shift to state 39
-- On AND shift to state 41
-- On SEMI reduce production expr -> expr NE expr 
-- On RPAR reduce production expr -> expr NE expr 
-- On RHOOK reduce production expr -> expr NE expr 
-- On RACC reduce production expr -> expr NE expr 
-- On PLUS reduce production expr -> expr NE expr 
-- On MOINS reduce production expr -> expr NE expr 
-- On MOD reduce production expr -> expr NE expr 
-- On FOIS reduce production expr -> expr NE expr 
-- On DIV reduce production expr -> expr NE expr 
-- On COMMA reduce production expr -> expr NE expr 

State 45:
expr -> expr MOD . expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 46

State 46:
expr -> expr . PLUS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOINS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . FOIS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOD expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr MOD expr . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . EQ expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . NE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On OR shift to state 39
-- On NE shift to state 43
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On EQ shift to state 55
-- On AND shift to state 41
-- On SEMI reduce production expr -> expr MOD expr 
-- On RPAR reduce production expr -> expr MOD expr 
-- On RHOOK reduce production expr -> expr MOD expr 
-- On RACC reduce production expr -> expr MOD expr 
-- On PLUS reduce production expr -> expr MOD expr 
-- On MOINS reduce production expr -> expr MOD expr 
-- On FOIS reduce production expr -> expr MOD expr 
-- On DIV reduce production expr -> expr MOD expr 
-- On COMMA reduce production expr -> expr MOD expr 

State 47:
expr -> expr LT . expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 48

State 48:
expr -> expr . PLUS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOINS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . FOIS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOD expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr LT expr . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . EQ expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . NE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On OR shift to state 39
-- On AND shift to state 41
-- On SEMI reduce production expr -> expr LT expr 
-- On RPAR reduce production expr -> expr LT expr 
-- On RHOOK reduce production expr -> expr LT expr 
-- On RACC reduce production expr -> expr LT expr 
-- On PLUS reduce production expr -> expr LT expr 
-- On MOINS reduce production expr -> expr LT expr 
-- On MOD reduce production expr -> expr LT expr 
-- On FOIS reduce production expr -> expr LT expr 
-- On DIV reduce production expr -> expr LT expr 
-- On COMMA reduce production expr -> expr LT expr 

State 49:
expr -> expr LE . expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 50

State 50:
expr -> expr . PLUS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOINS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . FOIS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOD expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr LE expr . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . EQ expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . NE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On OR shift to state 39
-- On AND shift to state 41
-- On SEMI reduce production expr -> expr LE expr 
-- On RPAR reduce production expr -> expr LE expr 
-- On RHOOK reduce production expr -> expr LE expr 
-- On RACC reduce production expr -> expr LE expr 
-- On PLUS reduce production expr -> expr LE expr 
-- On MOINS reduce production expr -> expr LE expr 
-- On MOD reduce production expr -> expr LE expr 
-- On FOIS reduce production expr -> expr LE expr 
-- On DIV reduce production expr -> expr LE expr 
-- On COMMA reduce production expr -> expr LE expr 

State 51:
expr -> expr GT . expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 52

State 52:
expr -> expr . PLUS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOINS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . FOIS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOD expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr GT expr . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . EQ expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . NE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On OR shift to state 39
-- On AND shift to state 41
-- On SEMI reduce production expr -> expr GT expr 
-- On RPAR reduce production expr -> expr GT expr 
-- On RHOOK reduce production expr -> expr GT expr 
-- On RACC reduce production expr -> expr GT expr 
-- On PLUS reduce production expr -> expr GT expr 
-- On MOINS reduce production expr -> expr GT expr 
-- On MOD reduce production expr -> expr GT expr 
-- On FOIS reduce production expr -> expr GT expr 
-- On DIV reduce production expr -> expr GT expr 
-- On COMMA reduce production expr -> expr GT expr 

State 53:
expr -> expr GE . expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 54

State 54:
expr -> expr . PLUS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOINS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . FOIS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOD expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr GE expr . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . EQ expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . NE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On OR shift to state 39
-- On AND shift to state 41
-- On SEMI reduce production expr -> expr GE expr 
-- On RPAR reduce production expr -> expr GE expr 
-- On RHOOK reduce production expr -> expr GE expr 
-- On RACC reduce production expr -> expr GE expr 
-- On PLUS reduce production expr -> expr GE expr 
-- On MOINS reduce production expr -> expr GE expr 
-- On MOD reduce production expr -> expr GE expr 
-- On FOIS reduce production expr -> expr GE expr 
-- On DIV reduce production expr -> expr GE expr 
-- On COMMA reduce production expr -> expr GE expr 

State 55:
expr -> expr EQ . expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 56

State 56:
expr -> expr . PLUS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOINS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . FOIS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOD expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . EQ expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr EQ expr . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . NE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On OR shift to state 39
-- On AND shift to state 41
-- On SEMI reduce production expr -> expr EQ expr 
-- On RPAR reduce production expr -> expr EQ expr 
-- On RHOOK reduce production expr -> expr EQ expr 
-- On RACC reduce production expr -> expr EQ expr 
-- On PLUS reduce production expr -> expr EQ expr 
-- On MOINS reduce production expr -> expr EQ expr 
-- On MOD reduce production expr -> expr EQ expr 
-- On FOIS reduce production expr -> expr EQ expr 
-- On DIV reduce production expr -> expr EQ expr 
-- On COMMA reduce production expr -> expr EQ expr 

State 57:
expr -> expr FOIS . expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 58

State 58:
expr -> expr . PLUS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOINS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . FOIS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr FOIS expr . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOD expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . EQ expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . NE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On EQ shift to state 55
-- On AND shift to state 41
-- On SEMI reduce production expr -> expr FOIS expr 
-- On RPAR reduce production expr -> expr FOIS expr 
-- On RHOOK reduce production expr -> expr FOIS expr 
-- On RACC reduce production expr -> expr FOIS expr 
-- On PLUS reduce production expr -> expr FOIS expr 
-- On MOINS reduce production expr -> expr FOIS expr 
-- On FOIS reduce production expr -> expr FOIS expr 
-- On DIV reduce production expr -> expr FOIS expr 
-- On COMMA reduce production expr -> expr FOIS expr 

State 59:
expr -> expr DIV . expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 60

State 60:
expr -> expr . PLUS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOINS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . FOIS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr DIV expr . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOD expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . EQ expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . NE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On EQ shift to state 55
-- On AND shift to state 41
-- On SEMI reduce production expr -> expr DIV expr 
-- On RPAR reduce production expr -> expr DIV expr 
-- On RHOOK reduce production expr -> expr DIV expr 
-- On RACC reduce production expr -> expr DIV expr 
-- On PLUS reduce production expr -> expr DIV expr 
-- On MOINS reduce production expr -> expr DIV expr 
-- On FOIS reduce production expr -> expr DIV expr 
-- On DIV reduce production expr -> expr DIV expr 
-- On COMMA reduce production expr -> expr DIV expr 

State 61:
expr -> expr MOINS . expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 62

State 62:
expr -> expr . PLUS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOINS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr MOINS expr . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . FOIS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOD expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . EQ expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . NE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On EQ shift to state 55
-- On AND shift to state 41
-- On SEMI reduce production expr -> expr MOINS expr 
-- On RPAR reduce production expr -> expr MOINS expr 
-- On RHOOK reduce production expr -> expr MOINS expr 
-- On RACC reduce production expr -> expr MOINS expr 
-- On PLUS reduce production expr -> expr MOINS expr 
-- On MOINS reduce production expr -> expr MOINS expr 
-- On FOIS reduce production expr -> expr MOINS expr 
-- On DIV reduce production expr -> expr MOINS expr 
-- On COMMA reduce production expr -> expr MOINS expr 

State 63:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAR RACC ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On separated_nonempty_list(COMMA,expr) shift to state 64
-- On expr shift to state 36

State 64:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RPAR RACC ]
-- On RPAR reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) 
-- On RACC reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) 

State 65:
expr -> IDENT LHOOK . expr RHOOK [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 66

State 66:
expr -> IDENT LHOOK expr . RHOOK [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOINS expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . FOIS expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . DIV expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOD expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LT expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LE expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GT expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GE expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . EQ expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . NE expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . AND expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . OR expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
-- On RHOOK shift to state 67
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOINS shift to state 61
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On FOIS shift to state 57
-- On EQ shift to state 55
-- On DIV shift to state 59
-- On AND shift to state 41

State 67:
expr -> IDENT LHOOK expr RHOOK . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On SEMI reduce production expr -> IDENT LHOOK expr RHOOK 
-- On RPAR reduce production expr -> IDENT LHOOK expr RHOOK 
-- On RHOOK reduce production expr -> IDENT LHOOK expr RHOOK 
-- On RACC reduce production expr -> IDENT LHOOK expr RHOOK 
-- On PLUS reduce production expr -> IDENT LHOOK expr RHOOK 
-- On OR reduce production expr -> IDENT LHOOK expr RHOOK 
-- On NE reduce production expr -> IDENT LHOOK expr RHOOK 
-- On MOINS reduce production expr -> IDENT LHOOK expr RHOOK 
-- On MOD reduce production expr -> IDENT LHOOK expr RHOOK 
-- On LT reduce production expr -> IDENT LHOOK expr RHOOK 
-- On LE reduce production expr -> IDENT LHOOK expr RHOOK 
-- On GT reduce production expr -> IDENT LHOOK expr RHOOK 
-- On GE reduce production expr -> IDENT LHOOK expr RHOOK 
-- On FOIS reduce production expr -> IDENT LHOOK expr RHOOK 
-- On EQ reduce production expr -> IDENT LHOOK expr RHOOK 
-- On DIV reduce production expr -> IDENT LHOOK expr RHOOK 
-- On COMMA reduce production expr -> IDENT LHOOK expr RHOOK 
-- On AND reduce production expr -> IDENT LHOOK expr RHOOK 

State 68:
expr -> LHOOK expr . RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOINS expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . FOIS expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . DIV expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOD expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LT expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LE expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GT expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GE expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . EQ expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . NE expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . AND expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . OR expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
-- On RHOOK shift to state 69
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOINS shift to state 61
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On FOIS shift to state 57
-- On EQ shift to state 55
-- On DIV shift to state 59
-- On AND shift to state 41

State 69:
expr -> LHOOK expr RHOOK . LACC loption(separated_nonempty_list(COMMA,expr)) RACC [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On LACC shift to state 70

State 70:
expr -> LHOOK expr RHOOK LACC . loption(separated_nonempty_list(COMMA,expr)) RACC [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On separated_nonempty_list(COMMA,expr) shift to state 33
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 71
-- On expr shift to state 36
-- On RACC reduce production loption(separated_nonempty_list(COMMA,expr)) -> 

State 71:
expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) . RACC [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On RACC shift to state 72

State 72:
expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On SEMI reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On RPAR reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On RHOOK reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On RACC reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On PLUS reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On OR reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On NE reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On MOINS reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On MOD reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On LT reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On LE reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On GT reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On GE reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On FOIS reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On EQ reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On DIV reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On COMMA reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 
-- On AND reduce production expr -> LHOOK expr RHOOK LACC loption(separated_nonempty_list(COMMA,expr)) RACC 

State 73:
expr -> expr . PLUS expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOINS expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . FOIS expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . DIV expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOD expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LT expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LE expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GT expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GE expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . EQ expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . NE expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . AND expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . OR expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> LPAR expr . RPAR [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On RPAR shift to state 74
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOINS shift to state 61
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On FOIS shift to state 57
-- On EQ shift to state 55
-- On DIV shift to state 59
-- On AND shift to state 41

State 74:
expr -> LPAR expr RPAR . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On SEMI reduce production expr -> LPAR expr RPAR 
-- On RPAR reduce production expr -> LPAR expr RPAR 
-- On RHOOK reduce production expr -> LPAR expr RPAR 
-- On RACC reduce production expr -> LPAR expr RPAR 
-- On PLUS reduce production expr -> LPAR expr RPAR 
-- On OR reduce production expr -> LPAR expr RPAR 
-- On NE reduce production expr -> LPAR expr RPAR 
-- On MOINS reduce production expr -> LPAR expr RPAR 
-- On MOD reduce production expr -> LPAR expr RPAR 
-- On LT reduce production expr -> LPAR expr RPAR 
-- On LE reduce production expr -> LPAR expr RPAR 
-- On GT reduce production expr -> LPAR expr RPAR 
-- On GE reduce production expr -> LPAR expr RPAR 
-- On FOIS reduce production expr -> LPAR expr RPAR 
-- On EQ reduce production expr -> LPAR expr RPAR 
-- On DIV reduce production expr -> LPAR expr RPAR 
-- On COMMA reduce production expr -> LPAR expr RPAR 
-- On AND reduce production expr -> LPAR expr RPAR 

State 75:
expr -> expr . PLUS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOINS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . FOIS expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . MOD expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . LE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . GE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . EQ expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . NE expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
expr -> NOT expr . [ SEMI RPAR RHOOK RACC PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV COMMA AND ]
-- On SEMI reduce production expr -> NOT expr 
-- On RPAR reduce production expr -> NOT expr 
-- On RHOOK reduce production expr -> NOT expr 
-- On RACC reduce production expr -> NOT expr 
-- On PLUS reduce production expr -> NOT expr 
-- On OR reduce production expr -> NOT expr 
-- On NE reduce production expr -> NOT expr 
-- On MOINS reduce production expr -> NOT expr 
-- On MOD reduce production expr -> NOT expr 
-- On LT reduce production expr -> NOT expr 
-- On LE reduce production expr -> NOT expr 
-- On GT reduce production expr -> NOT expr 
-- On GE reduce production expr -> NOT expr 
-- On FOIS reduce production expr -> NOT expr 
-- On EQ reduce production expr -> NOT expr 
-- On DIV reduce production expr -> NOT expr 
-- On COMMA reduce production expr -> NOT expr 
-- On AND reduce production expr -> NOT expr 

State 76:
expr -> expr . PLUS expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOINS expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . FOIS expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . DIV expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOD expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LT expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LE expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GT expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GE expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . EQ expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . NE expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . AND expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . OR expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
instr -> WHILE LPAR expr . RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On RPAR shift to state 77
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOINS shift to state 61
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On FOIS shift to state 57
-- On EQ shift to state 55
-- On DIV shift to state 59
-- On AND shift to state 41

State 77:
instr -> WHILE LPAR expr RPAR . LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On LACC shift to state 78

State 78:
instr -> WHILE LPAR expr RPAR LACC . list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On WHILE shift to state 24
-- On RETURN shift to state 79
-- On PUTCHAR shift to state 81
-- On IF shift to state 85
-- On IDENT shift to state 90
-- On FOR shift to state 101
-- On simple_instr shift to state 110
-- On list(instr) shift to state 126
-- On instr shift to state 114
-- On RACC reduce production list(instr) -> 

State 79:
simple_instr -> RETURN . expr [ SEMI RPAR ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 80

State 80:
expr -> expr . PLUS expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOINS expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . FOIS expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . DIV expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOD expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LT expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LE expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GT expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GE expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . EQ expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . NE expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . AND expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . OR expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
simple_instr -> RETURN expr . [ SEMI RPAR ]
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOINS shift to state 61
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On FOIS shift to state 57
-- On EQ shift to state 55
-- On DIV shift to state 59
-- On AND shift to state 41
-- On SEMI reduce production simple_instr -> RETURN expr 
-- On RPAR reduce production simple_instr -> RETURN expr 

State 81:
simple_instr -> PUTCHAR . LPAR expr RPAR [ SEMI RPAR ]
-- On LPAR shift to state 82

State 82:
simple_instr -> PUTCHAR LPAR . expr RPAR [ SEMI RPAR ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 83

State 83:
expr -> expr . PLUS expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOINS expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . FOIS expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . DIV expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOD expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LT expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LE expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GT expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GE expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . EQ expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . NE expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . AND expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . OR expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
simple_instr -> PUTCHAR LPAR expr . RPAR [ SEMI RPAR ]
-- On RPAR shift to state 84
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOINS shift to state 61
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On FOIS shift to state 57
-- On EQ shift to state 55
-- On DIV shift to state 59
-- On AND shift to state 41

State 84:
simple_instr -> PUTCHAR LPAR expr RPAR . [ SEMI RPAR ]
-- On SEMI reduce production simple_instr -> PUTCHAR LPAR expr RPAR 
-- On RPAR reduce production simple_instr -> PUTCHAR LPAR expr RPAR 

State 85:
instr -> IF . LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
instr -> IF . LPAR expr RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On LPAR shift to state 86

State 86:
instr -> IF LPAR . expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
instr -> IF LPAR . expr RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 87

State 87:
expr -> expr . PLUS expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOINS expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . FOIS expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . DIV expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOD expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LT expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LE expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GT expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GE expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . EQ expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . NE expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . AND expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . OR expr [ RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
instr -> IF LPAR expr . RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
instr -> IF LPAR expr . RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On RPAR shift to state 88
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOINS shift to state 61
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On FOIS shift to state 57
-- On EQ shift to state 55
-- On DIV shift to state 59
-- On AND shift to state 41

State 88:
instr -> IF LPAR expr RPAR . LACC list(instr) RACC ELSE LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
instr -> IF LPAR expr RPAR . LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On LACC shift to state 89

State 89:
instr -> IF LPAR expr RPAR LACC . list(instr) RACC ELSE LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
instr -> IF LPAR expr RPAR LACC . list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On WHILE shift to state 24
-- On RETURN shift to state 79
-- On PUTCHAR shift to state 81
-- On IF shift to state 85
-- On IDENT shift to state 90
-- On FOR shift to state 101
-- On simple_instr shift to state 110
-- On list(instr) shift to state 120
-- On instr shift to state 114
-- On RACC reduce production list(instr) -> 

State 90:
simple_instr -> IDENT . EGAL expr [ SEMI RPAR ]
simple_instr -> IDENT . LHOOK expr RHOOK EGAL expr [ SEMI RPAR ]
simple_instr -> IDENT . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SEMI RPAR ]
-- On LPAR shift to state 91
-- On LHOOK shift to state 94
-- On EGAL shift to state 99

State 91:
simple_instr -> IDENT LPAR . loption(separated_nonempty_list(COMMA,expr)) RPAR [ SEMI RPAR ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On separated_nonempty_list(COMMA,expr) shift to state 33
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 92
-- On expr shift to state 36
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,expr)) -> 

State 92:
simple_instr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) . RPAR [ SEMI RPAR ]
-- On RPAR shift to state 93

State 93:
simple_instr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR . [ SEMI RPAR ]
-- On SEMI reduce production simple_instr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On RPAR reduce production simple_instr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 

State 94:
simple_instr -> IDENT LHOOK . expr RHOOK EGAL expr [ SEMI RPAR ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 95

State 95:
expr -> expr . PLUS expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOINS expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . FOIS expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . DIV expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOD expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LT expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LE expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GT expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GE expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . EQ expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . NE expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . AND expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . OR expr [ RHOOK PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
simple_instr -> IDENT LHOOK expr . RHOOK EGAL expr [ SEMI RPAR ]
-- On RHOOK shift to state 96
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOINS shift to state 61
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On FOIS shift to state 57
-- On EQ shift to state 55
-- On DIV shift to state 59
-- On AND shift to state 41

State 96:
simple_instr -> IDENT LHOOK expr RHOOK . EGAL expr [ SEMI RPAR ]
-- On EGAL shift to state 97

State 97:
simple_instr -> IDENT LHOOK expr RHOOK EGAL . expr [ SEMI RPAR ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 98

State 98:
expr -> expr . PLUS expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOINS expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . FOIS expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . DIV expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOD expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LT expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LE expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GT expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GE expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . EQ expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . NE expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . AND expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . OR expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
simple_instr -> IDENT LHOOK expr RHOOK EGAL expr . [ SEMI RPAR ]
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOINS shift to state 61
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On FOIS shift to state 57
-- On EQ shift to state 55
-- On DIV shift to state 59
-- On AND shift to state 41
-- On SEMI reduce production simple_instr -> IDENT LHOOK expr RHOOK EGAL expr 
-- On RPAR reduce production simple_instr -> IDENT LHOOK expr RHOOK EGAL expr 

State 99:
simple_instr -> IDENT EGAL . expr [ SEMI RPAR ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 100

State 100:
expr -> expr . PLUS expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOINS expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . FOIS expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . DIV expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOD expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LT expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LE expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GT expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GE expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . EQ expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . NE expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . AND expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . OR expr [ SEMI RPAR PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
simple_instr -> IDENT EGAL expr . [ SEMI RPAR ]
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOINS shift to state 61
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On FOIS shift to state 57
-- On EQ shift to state 55
-- On DIV shift to state 59
-- On AND shift to state 41
-- On SEMI reduce production simple_instr -> IDENT EGAL expr 
-- On RPAR reduce production simple_instr -> IDENT EGAL expr 

State 101:
instr -> FOR . LPAR var_decl SEMI expr SEMI simple_instr RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On LPAR shift to state 102

State 102:
instr -> FOR LPAR . var_decl SEMI expr SEMI simple_instr RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On VOID shift to state 1
-- On TAB shift to state 2
-- On INT shift to state 3
-- On BOOL shift to state 4
-- On var_decl shift to state 103
-- On typ shift to state 116

State 103:
instr -> FOR LPAR var_decl . SEMI expr SEMI simple_instr RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On SEMI shift to state 104

State 104:
instr -> FOR LPAR var_decl SEMI . expr SEMI simple_instr RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 105

State 105:
expr -> expr . PLUS expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOINS expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . FOIS expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . DIV expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOD expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LT expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LE expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GT expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GE expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . EQ expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . NE expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . AND expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . OR expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
instr -> FOR LPAR var_decl SEMI expr . SEMI simple_instr RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On SEMI shift to state 106
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOINS shift to state 61
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On FOIS shift to state 57
-- On EQ shift to state 55
-- On DIV shift to state 59
-- On AND shift to state 41

State 106:
instr -> FOR LPAR var_decl SEMI expr SEMI . simple_instr RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On RETURN shift to state 79
-- On PUTCHAR shift to state 81
-- On IDENT shift to state 90
-- On simple_instr shift to state 107

State 107:
instr -> FOR LPAR var_decl SEMI expr SEMI simple_instr . RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On RPAR shift to state 108

State 108:
instr -> FOR LPAR var_decl SEMI expr SEMI simple_instr RPAR . LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On LACC shift to state 109

State 109:
instr -> FOR LPAR var_decl SEMI expr SEMI simple_instr RPAR LACC . list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On WHILE shift to state 24
-- On RETURN shift to state 79
-- On PUTCHAR shift to state 81
-- On IF shift to state 85
-- On IDENT shift to state 90
-- On FOR shift to state 101
-- On simple_instr shift to state 110
-- On list(instr) shift to state 112
-- On instr shift to state 114
-- On RACC reduce production list(instr) -> 

State 110:
instr -> simple_instr . SEMI [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On SEMI shift to state 111

State 111:
instr -> simple_instr SEMI . [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On WHILE reduce production instr -> simple_instr SEMI 
-- On RETURN reduce production instr -> simple_instr SEMI 
-- On RACC reduce production instr -> simple_instr SEMI 
-- On PUTCHAR reduce production instr -> simple_instr SEMI 
-- On IF reduce production instr -> simple_instr SEMI 
-- On IDENT reduce production instr -> simple_instr SEMI 
-- On FOR reduce production instr -> simple_instr SEMI 

State 112:
instr -> FOR LPAR var_decl SEMI expr SEMI simple_instr RPAR LACC list(instr) . RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On RACC shift to state 113

State 113:
instr -> FOR LPAR var_decl SEMI expr SEMI simple_instr RPAR LACC list(instr) RACC . [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On WHILE reduce production instr -> FOR LPAR var_decl SEMI expr SEMI simple_instr RPAR LACC list(instr) RACC 
-- On RETURN reduce production instr -> FOR LPAR var_decl SEMI expr SEMI simple_instr RPAR LACC list(instr) RACC 
-- On RACC reduce production instr -> FOR LPAR var_decl SEMI expr SEMI simple_instr RPAR LACC list(instr) RACC 
-- On PUTCHAR reduce production instr -> FOR LPAR var_decl SEMI expr SEMI simple_instr RPAR LACC list(instr) RACC 
-- On IF reduce production instr -> FOR LPAR var_decl SEMI expr SEMI simple_instr RPAR LACC list(instr) RACC 
-- On IDENT reduce production instr -> FOR LPAR var_decl SEMI expr SEMI simple_instr RPAR LACC list(instr) RACC 
-- On FOR reduce production instr -> FOR LPAR var_decl SEMI expr SEMI simple_instr RPAR LACC list(instr) RACC 

State 114:
list(instr) -> instr . list(instr) [ RACC ]
-- On WHILE shift to state 24
-- On RETURN shift to state 79
-- On PUTCHAR shift to state 81
-- On IF shift to state 85
-- On IDENT shift to state 90
-- On FOR shift to state 101
-- On simple_instr shift to state 110
-- On list(instr) shift to state 115
-- On instr shift to state 114
-- On RACC reduce production list(instr) -> 

State 115:
list(instr) -> instr list(instr) . [ RACC ]
-- On RACC reduce production list(instr) -> instr list(instr) 

State 116:
var_decl -> typ . IDENT [ SEMI ]
var_decl -> typ . IDENT EGAL expr [ SEMI ]
-- On IDENT shift to state 117

State 117:
var_decl -> typ IDENT . [ SEMI ]
var_decl -> typ IDENT . EGAL expr [ SEMI ]
-- On EGAL shift to state 118
-- On SEMI reduce production var_decl -> typ IDENT 

State 118:
var_decl -> typ IDENT EGAL . expr [ SEMI ]
-- On NOT shift to state 26
-- On LPAR shift to state 27
-- On LHOOK shift to state 28
-- On IDENT shift to state 29
-- On CST_B shift to state 31
-- On CST shift to state 32
-- On expr shift to state 119

State 119:
expr -> expr . PLUS expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOINS expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . FOIS expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . DIV expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . MOD expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LT expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . LE expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GT expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . GE expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . EQ expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . NE expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . AND expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
expr -> expr . OR expr [ SEMI PLUS OR NE MOINS MOD LT LE GT GE FOIS EQ DIV AND ]
var_decl -> typ IDENT EGAL expr . [ SEMI ]
-- On PLUS shift to state 37
-- On OR shift to state 39
-- On NE shift to state 43
-- On MOINS shift to state 61
-- On MOD shift to state 45
-- On LT shift to state 47
-- On LE shift to state 49
-- On GT shift to state 51
-- On GE shift to state 53
-- On FOIS shift to state 57
-- On EQ shift to state 55
-- On DIV shift to state 59
-- On AND shift to state 41
-- On SEMI reduce production var_decl -> typ IDENT EGAL expr 

State 120:
instr -> IF LPAR expr RPAR LACC list(instr) . RACC ELSE LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
instr -> IF LPAR expr RPAR LACC list(instr) . RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On RACC shift to state 121

State 121:
instr -> IF LPAR expr RPAR LACC list(instr) RACC . ELSE LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
instr -> IF LPAR expr RPAR LACC list(instr) RACC . [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On ELSE shift to state 122
-- On WHILE reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC 
-- On RETURN reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC 
-- On RACC reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC 
-- On PUTCHAR reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC 
-- On IF reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC 
-- On IDENT reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC 
-- On FOR reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC 

State 122:
instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE . LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On LACC shift to state 123

State 123:
instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC . list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On WHILE shift to state 24
-- On RETURN shift to state 79
-- On PUTCHAR shift to state 81
-- On IF shift to state 85
-- On IDENT shift to state 90
-- On FOR shift to state 101
-- On simple_instr shift to state 110
-- On list(instr) shift to state 124
-- On instr shift to state 114
-- On RACC reduce production list(instr) -> 

State 124:
instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) . RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On RACC shift to state 125

State 125:
instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC . [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On WHILE reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC 
-- On RETURN reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC 
-- On RACC reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC 
-- On PUTCHAR reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC 
-- On IF reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC 
-- On IDENT reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC 
-- On FOR reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC 

State 126:
instr -> WHILE LPAR expr RPAR LACC list(instr) . RACC [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On RACC shift to state 127

State 127:
instr -> WHILE LPAR expr RPAR LACC list(instr) RACC . [ WHILE RETURN RACC PUTCHAR IF IDENT FOR ]
-- On WHILE reduce production instr -> WHILE LPAR expr RPAR LACC list(instr) RACC 
-- On RETURN reduce production instr -> WHILE LPAR expr RPAR LACC list(instr) RACC 
-- On RACC reduce production instr -> WHILE LPAR expr RPAR LACC list(instr) RACC 
-- On PUTCHAR reduce production instr -> WHILE LPAR expr RPAR LACC list(instr) RACC 
-- On IF reduce production instr -> WHILE LPAR expr RPAR LACC list(instr) RACC 
-- On IDENT reduce production instr -> WHILE LPAR expr RPAR LACC list(instr) RACC 
-- On FOR reduce production instr -> WHILE LPAR expr RPAR LACC list(instr) RACC 

State 128:
fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) . RACC [ VOID TAB INT EOF BOOL ]
-- On RACC shift to state 129

State 129:
fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC . [ VOID TAB INT EOF BOOL ]
-- On VOID reduce production fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 
-- On TAB reduce production fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 
-- On INT reduce production fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 
-- On EOF reduce production fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 
-- On BOOL reduce production fun_def -> typ IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 

State 130:
var_decl_list -> var_decl . SEMI var_decl_list [ WHILE RETURN RACC PUTCHAR IF IDENT FOR END ]
-- On SEMI shift to state 131

State 131:
var_decl_list -> var_decl SEMI . var_decl_list [ WHILE RETURN RACC PUTCHAR IF IDENT FOR END ]
-- On VOID shift to state 1
-- On TAB shift to state 2
-- On INT shift to state 3
-- On BOOL shift to state 4
-- On var_decl_list shift to state 132
-- On var_decl shift to state 130
-- On typ shift to state 116
-- On WHILE reduce production var_decl_list -> 
-- On RETURN reduce production var_decl_list -> 
-- On RACC reduce production var_decl_list -> 
-- On PUTCHAR reduce production var_decl_list -> 
-- On IF reduce production var_decl_list -> 
-- On IDENT reduce production var_decl_list -> 
-- On FOR reduce production var_decl_list -> 
-- On END reduce production var_decl_list -> 

State 132:
var_decl_list -> var_decl SEMI var_decl_list . [ WHILE RETURN RACC PUTCHAR IF IDENT FOR END ]
-- On WHILE reduce production var_decl_list -> var_decl SEMI var_decl_list 
-- On RETURN reduce production var_decl_list -> var_decl SEMI var_decl_list 
-- On RACC reduce production var_decl_list -> var_decl SEMI var_decl_list 
-- On PUTCHAR reduce production var_decl_list -> var_decl SEMI var_decl_list 
-- On IF reduce production var_decl_list -> var_decl SEMI var_decl_list 
-- On IDENT reduce production var_decl_list -> var_decl SEMI var_decl_list 
-- On FOR reduce production var_decl_list -> var_decl SEMI var_decl_list 
-- On END reduce production var_decl_list -> var_decl SEMI var_decl_list 

State 133:
fun_def_list -> fun_def_list fun_def . [ VOID TAB INT EOF BOOL ]
-- On VOID reduce production fun_def_list -> fun_def_list fun_def 
-- On TAB reduce production fun_def_list -> fun_def_list fun_def 
-- On INT reduce production fun_def_list -> fun_def_list fun_def 
-- On EOF reduce production fun_def_list -> fun_def_list fun_def 
-- On BOOL reduce production fun_def_list -> fun_def_list fun_def 

State 134:
prog' -> prog . [ # ]
-- On # accept prog

