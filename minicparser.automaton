State 0:
prog' -> . prog [ # ]
-- On INT shift to state 1
-- On BOOL shift to state 4
-- On var_decl_list shift to state 7
-- On var_decl shift to state 81
-- On prog shift to state 108

State 1:
var_decl -> INT . IDENT SEMI [ WHILE VOID RETURN RACC PUTCHAR INT IF IDENT BOOL ]
-- On IDENT shift to state 2

State 2:
var_decl -> INT IDENT . SEMI [ WHILE VOID RETURN RACC PUTCHAR INT IF IDENT BOOL ]
-- On SEMI shift to state 3

State 3:
var_decl -> INT IDENT SEMI . [ WHILE VOID RETURN RACC PUTCHAR INT IF IDENT BOOL ]
-- On WHILE reduce production var_decl -> INT IDENT SEMI 
-- On VOID reduce production var_decl -> INT IDENT SEMI 
-- On RETURN reduce production var_decl -> INT IDENT SEMI 
-- On RACC reduce production var_decl -> INT IDENT SEMI 
-- On PUTCHAR reduce production var_decl -> INT IDENT SEMI 
-- On INT reduce production var_decl -> INT IDENT SEMI 
-- On IF reduce production var_decl -> INT IDENT SEMI 
-- On IDENT reduce production var_decl -> INT IDENT SEMI 
-- On BOOL reduce production var_decl -> INT IDENT SEMI 

State 4:
var_decl -> BOOL . IDENT SEMI [ WHILE VOID RETURN RACC PUTCHAR INT IF IDENT BOOL ]
-- On IDENT shift to state 5

State 5:
var_decl -> BOOL IDENT . SEMI [ WHILE VOID RETURN RACC PUTCHAR INT IF IDENT BOOL ]
-- On SEMI shift to state 6

State 6:
var_decl -> BOOL IDENT SEMI . [ WHILE VOID RETURN RACC PUTCHAR INT IF IDENT BOOL ]
-- On WHILE reduce production var_decl -> BOOL IDENT SEMI 
-- On VOID reduce production var_decl -> BOOL IDENT SEMI 
-- On RETURN reduce production var_decl -> BOOL IDENT SEMI 
-- On RACC reduce production var_decl -> BOOL IDENT SEMI 
-- On PUTCHAR reduce production var_decl -> BOOL IDENT SEMI 
-- On INT reduce production var_decl -> BOOL IDENT SEMI 
-- On IF reduce production var_decl -> BOOL IDENT SEMI 
-- On IDENT reduce production var_decl -> BOOL IDENT SEMI 
-- On BOOL reduce production var_decl -> BOOL IDENT SEMI 

State 7:
prog -> var_decl_list . fun_def_list EOF [ # ]
var_decl_list -> var_decl_list . var_decl [ VOID INT BOOL ]
-- On VOID shift to state 8
-- On INT shift to state 82
-- On BOOL shift to state 91
-- On var_decl shift to state 78
-- On fun_def_list shift to state 100
-- On fun_def shift to state 107

State 8:
fun_def -> VOID . IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On IDENT shift to state 9

State 9:
fun_def -> VOID IDENT . LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On LPAR shift to state 10

State 10:
fun_def -> VOID IDENT LPAR . loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On INT shift to state 11
-- On BOOL shift to state 13
-- On separated_nonempty_list(COMMA,params) shift to state 15
-- On params shift to state 16
-- On loption(separated_nonempty_list(COMMA,params)) shift to state 19
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,params)) -> 

State 11:
params -> INT . IDENT [ RPAR COMMA ]
-- On IDENT shift to state 12

State 12:
params -> INT IDENT . [ RPAR COMMA ]
-- On RPAR reduce production params -> INT IDENT 
-- On COMMA reduce production params -> INT IDENT 

State 13:
params -> BOOL . IDENT [ RPAR COMMA ]
-- On IDENT shift to state 14

State 14:
params -> BOOL IDENT . [ RPAR COMMA ]
-- On RPAR reduce production params -> BOOL IDENT 
-- On COMMA reduce production params -> BOOL IDENT 

State 15:
loption(separated_nonempty_list(COMMA,params)) -> separated_nonempty_list(COMMA,params) . [ RPAR ]
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,params)) -> separated_nonempty_list(COMMA,params) 

State 16:
separated_nonempty_list(COMMA,params) -> params . [ RPAR ]
separated_nonempty_list(COMMA,params) -> params . COMMA separated_nonempty_list(COMMA,params) [ RPAR ]
-- On COMMA shift to state 17
-- On RPAR reduce production separated_nonempty_list(COMMA,params) -> params 

State 17:
separated_nonempty_list(COMMA,params) -> params COMMA . separated_nonempty_list(COMMA,params) [ RPAR ]
-- On INT shift to state 11
-- On BOOL shift to state 13
-- On separated_nonempty_list(COMMA,params) shift to state 18
-- On params shift to state 16

State 18:
separated_nonempty_list(COMMA,params) -> params COMMA separated_nonempty_list(COMMA,params) . [ RPAR ]
-- On RPAR reduce production separated_nonempty_list(COMMA,params) -> params COMMA separated_nonempty_list(COMMA,params) 

State 19:
fun_def -> VOID IDENT LPAR loption(separated_nonempty_list(COMMA,params)) . RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On RPAR shift to state 20

State 20:
fun_def -> VOID IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR . LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On LACC shift to state 21

State 21:
fun_def -> VOID IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC . var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On INT shift to state 1
-- On BOOL shift to state 4
-- On var_decl_list shift to state 22
-- On var_decl shift to state 81

State 22:
fun_def -> VOID IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list . list(instr) RACC [ VOID INT EOF BOOL ]
var_decl_list -> var_decl_list . var_decl [ WHILE RETURN RACC PUTCHAR INT IF IDENT BOOL ]
-- On WHILE shift to state 23
-- On RETURN shift to state 47
-- On PUTCHAR shift to state 50
-- On INT shift to state 1
-- On IF shift to state 55
-- On IDENT shift to state 60
-- On BOOL shift to state 4
-- On var_decl shift to state 78
-- On list(instr) shift to state 79
-- On instr shift to state 74
-- On RACC reduce production list(instr) -> 

State 23:
instr -> WHILE . LPAR expr RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On LPAR shift to state 24

State 24:
instr -> WHILE LPAR . expr RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On LPAR shift to state 25
-- On IDENT shift to state 26
-- On CST_B shift to state 28
-- On CST shift to state 29
-- On expr shift to state 44

State 25:
expr -> LPAR . expr RPAR [ SEMI RPAR PLUS LT FOIS COMMA ]
-- On LPAR shift to state 25
-- On IDENT shift to state 26
-- On CST_B shift to state 28
-- On CST shift to state 29
-- On expr shift to state 42

State 26:
expr -> IDENT . [ SEMI RPAR PLUS LT FOIS COMMA ]
expr -> IDENT . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ SEMI RPAR PLUS LT FOIS COMMA ]
-- On LPAR shift to state 27
-- On SEMI reduce production expr -> IDENT 
-- On RPAR reduce production expr -> IDENT 
-- On PLUS reduce production expr -> IDENT 
-- On LT reduce production expr -> IDENT 
-- On FOIS reduce production expr -> IDENT 
-- On COMMA reduce production expr -> IDENT 

State 27:
expr -> IDENT LPAR . loption(separated_nonempty_list(COMMA,expr)) RPAR [ SEMI RPAR PLUS LT FOIS COMMA ]
-- On LPAR shift to state 25
-- On IDENT shift to state 26
-- On CST_B shift to state 28
-- On CST shift to state 29
-- On separated_nonempty_list(COMMA,expr) shift to state 30
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 31
-- On expr shift to state 33
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,expr)) -> 

State 28:
expr -> CST_B . [ SEMI RPAR PLUS LT FOIS COMMA ]
-- On SEMI reduce production expr -> CST_B 
-- On RPAR reduce production expr -> CST_B 
-- On PLUS reduce production expr -> CST_B 
-- On LT reduce production expr -> CST_B 
-- On FOIS reduce production expr -> CST_B 
-- On COMMA reduce production expr -> CST_B 

State 29:
expr -> CST . [ SEMI RPAR PLUS LT FOIS COMMA ]
-- On SEMI reduce production expr -> CST 
-- On RPAR reduce production expr -> CST 
-- On PLUS reduce production expr -> CST 
-- On LT reduce production expr -> CST 
-- On FOIS reduce production expr -> CST 
-- On COMMA reduce production expr -> CST 

State 30:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RPAR ]
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 

State 31:
expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) . RPAR [ SEMI RPAR PLUS LT FOIS COMMA ]
-- On RPAR shift to state 32

State 32:
expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR . [ SEMI RPAR PLUS LT FOIS COMMA ]
-- On SEMI reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On RPAR reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On PLUS reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On LT reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On FOIS reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 
-- On COMMA reduce production expr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 

State 33:
expr -> expr . PLUS expr [ RPAR PLUS LT FOIS COMMA ]
expr -> expr . FOIS expr [ RPAR PLUS LT FOIS COMMA ]
expr -> expr . LT expr [ RPAR PLUS LT FOIS COMMA ]
separated_nonempty_list(COMMA,expr) -> expr . [ RPAR ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAR ]
-- On PLUS shift to state 34
-- On LT shift to state 36
-- On FOIS shift to state 38
-- On COMMA shift to state 40
-- On RPAR reduce production separated_nonempty_list(COMMA,expr) -> expr 

State 34:
expr -> expr PLUS . expr [ SEMI RPAR PLUS LT FOIS COMMA ]
-- On LPAR shift to state 25
-- On IDENT shift to state 26
-- On CST_B shift to state 28
-- On CST shift to state 29
-- On expr shift to state 35

State 35:
expr -> expr . PLUS expr [ SEMI RPAR PLUS LT FOIS COMMA ]
expr -> expr PLUS expr . [ SEMI RPAR PLUS LT FOIS COMMA ]
expr -> expr . FOIS expr [ SEMI RPAR PLUS LT FOIS COMMA ]
expr -> expr . LT expr [ SEMI RPAR PLUS LT FOIS COMMA ]
-- On LT shift to state 36
-- On FOIS shift to state 38
-- On SEMI reduce production expr -> expr PLUS expr 
-- On RPAR reduce production expr -> expr PLUS expr 
-- On PLUS reduce production expr -> expr PLUS expr 
-- On COMMA reduce production expr -> expr PLUS expr 

State 36:
expr -> expr LT . expr [ SEMI RPAR PLUS LT FOIS COMMA ]
-- On LPAR shift to state 25
-- On IDENT shift to state 26
-- On CST_B shift to state 28
-- On CST shift to state 29
-- On expr shift to state 37

State 37:
expr -> expr . PLUS expr [ SEMI RPAR PLUS LT FOIS COMMA ]
expr -> expr . FOIS expr [ SEMI RPAR PLUS LT FOIS COMMA ]
expr -> expr . LT expr [ SEMI RPAR PLUS LT FOIS COMMA ]
expr -> expr LT expr . [ SEMI RPAR PLUS LT FOIS COMMA ]
-- On SEMI reduce production expr -> expr LT expr 
-- On RPAR reduce production expr -> expr LT expr 
-- On PLUS reduce production expr -> expr LT expr 
-- On FOIS reduce production expr -> expr LT expr 
-- On COMMA reduce production expr -> expr LT expr 

State 38:
expr -> expr FOIS . expr [ SEMI RPAR PLUS LT FOIS COMMA ]
-- On LPAR shift to state 25
-- On IDENT shift to state 26
-- On CST_B shift to state 28
-- On CST shift to state 29
-- On expr shift to state 39

State 39:
expr -> expr . PLUS expr [ SEMI RPAR PLUS LT FOIS COMMA ]
expr -> expr . FOIS expr [ SEMI RPAR PLUS LT FOIS COMMA ]
expr -> expr FOIS expr . [ SEMI RPAR PLUS LT FOIS COMMA ]
expr -> expr . LT expr [ SEMI RPAR PLUS LT FOIS COMMA ]
-- On LT shift to state 36
-- On SEMI reduce production expr -> expr FOIS expr 
-- On RPAR reduce production expr -> expr FOIS expr 
-- On PLUS reduce production expr -> expr FOIS expr 
-- On FOIS reduce production expr -> expr FOIS expr 
-- On COMMA reduce production expr -> expr FOIS expr 

State 40:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAR ]
-- On LPAR shift to state 25
-- On IDENT shift to state 26
-- On CST_B shift to state 28
-- On CST shift to state 29
-- On separated_nonempty_list(COMMA,expr) shift to state 41
-- On expr shift to state 33

State 41:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RPAR ]
-- On RPAR reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) 

State 42:
expr -> expr . PLUS expr [ RPAR PLUS LT FOIS ]
expr -> expr . FOIS expr [ RPAR PLUS LT FOIS ]
expr -> expr . LT expr [ RPAR PLUS LT FOIS ]
expr -> LPAR expr . RPAR [ SEMI RPAR PLUS LT FOIS COMMA ]
-- On RPAR shift to state 43
-- On PLUS shift to state 34
-- On LT shift to state 36
-- On FOIS shift to state 38

State 43:
expr -> LPAR expr RPAR . [ SEMI RPAR PLUS LT FOIS COMMA ]
-- On SEMI reduce production expr -> LPAR expr RPAR 
-- On RPAR reduce production expr -> LPAR expr RPAR 
-- On PLUS reduce production expr -> LPAR expr RPAR 
-- On LT reduce production expr -> LPAR expr RPAR 
-- On FOIS reduce production expr -> LPAR expr RPAR 
-- On COMMA reduce production expr -> LPAR expr RPAR 

State 44:
expr -> expr . PLUS expr [ RPAR PLUS LT FOIS ]
expr -> expr . FOIS expr [ RPAR PLUS LT FOIS ]
expr -> expr . LT expr [ RPAR PLUS LT FOIS ]
instr -> WHILE LPAR expr . RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On RPAR shift to state 45
-- On PLUS shift to state 34
-- On LT shift to state 36
-- On FOIS shift to state 38

State 45:
instr -> WHILE LPAR expr RPAR . LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On LACC shift to state 46

State 46:
instr -> WHILE LPAR expr RPAR LACC . list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On WHILE shift to state 23
-- On RETURN shift to state 47
-- On PUTCHAR shift to state 50
-- On IF shift to state 55
-- On IDENT shift to state 60
-- On list(instr) shift to state 76
-- On instr shift to state 74
-- On RACC reduce production list(instr) -> 

State 47:
instr -> RETURN . expr SEMI [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On LPAR shift to state 25
-- On IDENT shift to state 26
-- On CST_B shift to state 28
-- On CST shift to state 29
-- On expr shift to state 48

State 48:
expr -> expr . PLUS expr [ SEMI PLUS LT FOIS ]
expr -> expr . FOIS expr [ SEMI PLUS LT FOIS ]
expr -> expr . LT expr [ SEMI PLUS LT FOIS ]
instr -> RETURN expr . SEMI [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On SEMI shift to state 49
-- On PLUS shift to state 34
-- On LT shift to state 36
-- On FOIS shift to state 38

State 49:
instr -> RETURN expr SEMI . [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On WHILE reduce production instr -> RETURN expr SEMI 
-- On RETURN reduce production instr -> RETURN expr SEMI 
-- On RACC reduce production instr -> RETURN expr SEMI 
-- On PUTCHAR reduce production instr -> RETURN expr SEMI 
-- On IF reduce production instr -> RETURN expr SEMI 
-- On IDENT reduce production instr -> RETURN expr SEMI 

State 50:
instr -> PUTCHAR . LPAR expr RPAR SEMI [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On LPAR shift to state 51

State 51:
instr -> PUTCHAR LPAR . expr RPAR SEMI [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On LPAR shift to state 25
-- On IDENT shift to state 26
-- On CST_B shift to state 28
-- On CST shift to state 29
-- On expr shift to state 52

State 52:
expr -> expr . PLUS expr [ RPAR PLUS LT FOIS ]
expr -> expr . FOIS expr [ RPAR PLUS LT FOIS ]
expr -> expr . LT expr [ RPAR PLUS LT FOIS ]
instr -> PUTCHAR LPAR expr . RPAR SEMI [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On RPAR shift to state 53
-- On PLUS shift to state 34
-- On LT shift to state 36
-- On FOIS shift to state 38

State 53:
instr -> PUTCHAR LPAR expr RPAR . SEMI [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On SEMI shift to state 54

State 54:
instr -> PUTCHAR LPAR expr RPAR SEMI . [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On WHILE reduce production instr -> PUTCHAR LPAR expr RPAR SEMI 
-- On RETURN reduce production instr -> PUTCHAR LPAR expr RPAR SEMI 
-- On RACC reduce production instr -> PUTCHAR LPAR expr RPAR SEMI 
-- On PUTCHAR reduce production instr -> PUTCHAR LPAR expr RPAR SEMI 
-- On IF reduce production instr -> PUTCHAR LPAR expr RPAR SEMI 
-- On IDENT reduce production instr -> PUTCHAR LPAR expr RPAR SEMI 

State 55:
instr -> IF . LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
instr -> IF . LPAR expr RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On LPAR shift to state 56

State 56:
instr -> IF LPAR . expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
instr -> IF LPAR . expr RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On LPAR shift to state 25
-- On IDENT shift to state 26
-- On CST_B shift to state 28
-- On CST shift to state 29
-- On expr shift to state 57

State 57:
expr -> expr . PLUS expr [ RPAR PLUS LT FOIS ]
expr -> expr . FOIS expr [ RPAR PLUS LT FOIS ]
expr -> expr . LT expr [ RPAR PLUS LT FOIS ]
instr -> IF LPAR expr . RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
instr -> IF LPAR expr . RPAR LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On RPAR shift to state 58
-- On PLUS shift to state 34
-- On LT shift to state 36
-- On FOIS shift to state 38

State 58:
instr -> IF LPAR expr RPAR . LACC list(instr) RACC ELSE LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
instr -> IF LPAR expr RPAR . LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On LACC shift to state 59

State 59:
instr -> IF LPAR expr RPAR LACC . list(instr) RACC ELSE LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
instr -> IF LPAR expr RPAR LACC . list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On WHILE shift to state 23
-- On RETURN shift to state 47
-- On PUTCHAR shift to state 50
-- On IF shift to state 55
-- On IDENT shift to state 60
-- On list(instr) shift to state 68
-- On instr shift to state 74
-- On RACC reduce production list(instr) -> 

State 60:
instr -> IDENT . EGAL expr SEMI [ WHILE RETURN RACC PUTCHAR IF IDENT ]
instr -> IDENT . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR SEMI [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On LPAR shift to state 61
-- On EGAL shift to state 65

State 61:
instr -> IDENT LPAR . loption(separated_nonempty_list(COMMA,expr)) RPAR SEMI [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On LPAR shift to state 25
-- On IDENT shift to state 26
-- On CST_B shift to state 28
-- On CST shift to state 29
-- On separated_nonempty_list(COMMA,expr) shift to state 30
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 62
-- On expr shift to state 33
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,expr)) -> 

State 62:
instr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) . RPAR SEMI [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On RPAR shift to state 63

State 63:
instr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR . SEMI [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On SEMI shift to state 64

State 64:
instr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR SEMI . [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On WHILE reduce production instr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR SEMI 
-- On RETURN reduce production instr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR SEMI 
-- On RACC reduce production instr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR SEMI 
-- On PUTCHAR reduce production instr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR SEMI 
-- On IF reduce production instr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR SEMI 
-- On IDENT reduce production instr -> IDENT LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR SEMI 

State 65:
instr -> IDENT EGAL . expr SEMI [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On LPAR shift to state 25
-- On IDENT shift to state 26
-- On CST_B shift to state 28
-- On CST shift to state 29
-- On expr shift to state 66

State 66:
expr -> expr . PLUS expr [ SEMI PLUS LT FOIS ]
expr -> expr . FOIS expr [ SEMI PLUS LT FOIS ]
expr -> expr . LT expr [ SEMI PLUS LT FOIS ]
instr -> IDENT EGAL expr . SEMI [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On SEMI shift to state 67
-- On PLUS shift to state 34
-- On LT shift to state 36
-- On FOIS shift to state 38

State 67:
instr -> IDENT EGAL expr SEMI . [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On WHILE reduce production instr -> IDENT EGAL expr SEMI 
-- On RETURN reduce production instr -> IDENT EGAL expr SEMI 
-- On RACC reduce production instr -> IDENT EGAL expr SEMI 
-- On PUTCHAR reduce production instr -> IDENT EGAL expr SEMI 
-- On IF reduce production instr -> IDENT EGAL expr SEMI 
-- On IDENT reduce production instr -> IDENT EGAL expr SEMI 

State 68:
instr -> IF LPAR expr RPAR LACC list(instr) . RACC ELSE LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
instr -> IF LPAR expr RPAR LACC list(instr) . RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On RACC shift to state 69

State 69:
instr -> IF LPAR expr RPAR LACC list(instr) RACC . ELSE LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
instr -> IF LPAR expr RPAR LACC list(instr) RACC . [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On ELSE shift to state 70
-- On WHILE reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC 
-- On RETURN reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC 
-- On RACC reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC 
-- On PUTCHAR reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC 
-- On IF reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC 
-- On IDENT reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC 

State 70:
instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE . LACC list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On LACC shift to state 71

State 71:
instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC . list(instr) RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On WHILE shift to state 23
-- On RETURN shift to state 47
-- On PUTCHAR shift to state 50
-- On IF shift to state 55
-- On IDENT shift to state 60
-- On list(instr) shift to state 72
-- On instr shift to state 74
-- On RACC reduce production list(instr) -> 

State 72:
instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) . RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On RACC shift to state 73

State 73:
instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC . [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On WHILE reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC 
-- On RETURN reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC 
-- On RACC reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC 
-- On PUTCHAR reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC 
-- On IF reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC 
-- On IDENT reduce production instr -> IF LPAR expr RPAR LACC list(instr) RACC ELSE LACC list(instr) RACC 

State 74:
list(instr) -> instr . list(instr) [ RACC ]
-- On WHILE shift to state 23
-- On RETURN shift to state 47
-- On PUTCHAR shift to state 50
-- On IF shift to state 55
-- On IDENT shift to state 60
-- On list(instr) shift to state 75
-- On instr shift to state 74
-- On RACC reduce production list(instr) -> 

State 75:
list(instr) -> instr list(instr) . [ RACC ]
-- On RACC reduce production list(instr) -> instr list(instr) 

State 76:
instr -> WHILE LPAR expr RPAR LACC list(instr) . RACC [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On RACC shift to state 77

State 77:
instr -> WHILE LPAR expr RPAR LACC list(instr) RACC . [ WHILE RETURN RACC PUTCHAR IF IDENT ]
-- On WHILE reduce production instr -> WHILE LPAR expr RPAR LACC list(instr) RACC 
-- On RETURN reduce production instr -> WHILE LPAR expr RPAR LACC list(instr) RACC 
-- On RACC reduce production instr -> WHILE LPAR expr RPAR LACC list(instr) RACC 
-- On PUTCHAR reduce production instr -> WHILE LPAR expr RPAR LACC list(instr) RACC 
-- On IF reduce production instr -> WHILE LPAR expr RPAR LACC list(instr) RACC 
-- On IDENT reduce production instr -> WHILE LPAR expr RPAR LACC list(instr) RACC 

State 78:
var_decl_list -> var_decl_list var_decl . [ WHILE VOID RETURN RACC PUTCHAR INT IF IDENT BOOL ]
-- On WHILE reduce production var_decl_list -> var_decl_list var_decl 
-- On VOID reduce production var_decl_list -> var_decl_list var_decl 
-- On RETURN reduce production var_decl_list -> var_decl_list var_decl 
-- On RACC reduce production var_decl_list -> var_decl_list var_decl 
-- On PUTCHAR reduce production var_decl_list -> var_decl_list var_decl 
-- On INT reduce production var_decl_list -> var_decl_list var_decl 
-- On IF reduce production var_decl_list -> var_decl_list var_decl 
-- On IDENT reduce production var_decl_list -> var_decl_list var_decl 
-- On BOOL reduce production var_decl_list -> var_decl_list var_decl 

State 79:
fun_def -> VOID IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) . RACC [ VOID INT EOF BOOL ]
-- On RACC shift to state 80

State 80:
fun_def -> VOID IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC . [ VOID INT EOF BOOL ]
-- On VOID reduce production fun_def -> VOID IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 
-- On INT reduce production fun_def -> VOID IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 
-- On EOF reduce production fun_def -> VOID IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 
-- On BOOL reduce production fun_def -> VOID IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 

State 81:
var_decl_list -> var_decl . [ WHILE VOID RETURN RACC PUTCHAR INT IF IDENT BOOL ]
-- On WHILE reduce production var_decl_list -> var_decl 
-- On VOID reduce production var_decl_list -> var_decl 
-- On RETURN reduce production var_decl_list -> var_decl 
-- On RACC reduce production var_decl_list -> var_decl 
-- On PUTCHAR reduce production var_decl_list -> var_decl 
-- On INT reduce production var_decl_list -> var_decl 
-- On IF reduce production var_decl_list -> var_decl 
-- On IDENT reduce production var_decl_list -> var_decl 
-- On BOOL reduce production var_decl_list -> var_decl 

State 82:
fun_def -> INT . IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
var_decl -> INT . IDENT SEMI [ VOID INT BOOL ]
-- On IDENT shift to state 83

State 83:
fun_def -> INT IDENT . LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
var_decl -> INT IDENT . SEMI [ VOID INT BOOL ]
-- On SEMI shift to state 3
-- On LPAR shift to state 84

State 84:
fun_def -> INT IDENT LPAR . loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On INT shift to state 11
-- On BOOL shift to state 13
-- On separated_nonempty_list(COMMA,params) shift to state 15
-- On params shift to state 16
-- On loption(separated_nonempty_list(COMMA,params)) shift to state 85
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,params)) -> 

State 85:
fun_def -> INT IDENT LPAR loption(separated_nonempty_list(COMMA,params)) . RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On RPAR shift to state 86

State 86:
fun_def -> INT IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR . LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On LACC shift to state 87

State 87:
fun_def -> INT IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC . var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On INT shift to state 1
-- On BOOL shift to state 4
-- On var_decl_list shift to state 88
-- On var_decl shift to state 81

State 88:
fun_def -> INT IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list . list(instr) RACC [ VOID INT EOF BOOL ]
var_decl_list -> var_decl_list . var_decl [ WHILE RETURN RACC PUTCHAR INT IF IDENT BOOL ]
-- On WHILE shift to state 23
-- On RETURN shift to state 47
-- On PUTCHAR shift to state 50
-- On INT shift to state 1
-- On IF shift to state 55
-- On IDENT shift to state 60
-- On BOOL shift to state 4
-- On var_decl shift to state 78
-- On list(instr) shift to state 89
-- On instr shift to state 74
-- On RACC reduce production list(instr) -> 

State 89:
fun_def -> INT IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) . RACC [ VOID INT EOF BOOL ]
-- On RACC shift to state 90

State 90:
fun_def -> INT IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC . [ VOID INT EOF BOOL ]
-- On VOID reduce production fun_def -> INT IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 
-- On INT reduce production fun_def -> INT IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 
-- On EOF reduce production fun_def -> INT IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 
-- On BOOL reduce production fun_def -> INT IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 

State 91:
fun_def -> BOOL . IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
var_decl -> BOOL . IDENT SEMI [ VOID INT BOOL ]
-- On IDENT shift to state 92

State 92:
fun_def -> BOOL IDENT . LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
var_decl -> BOOL IDENT . SEMI [ VOID INT BOOL ]
-- On SEMI shift to state 6
-- On LPAR shift to state 93

State 93:
fun_def -> BOOL IDENT LPAR . loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On INT shift to state 11
-- On BOOL shift to state 13
-- On separated_nonempty_list(COMMA,params) shift to state 15
-- On params shift to state 16
-- On loption(separated_nonempty_list(COMMA,params)) shift to state 94
-- On RPAR reduce production loption(separated_nonempty_list(COMMA,params)) -> 

State 94:
fun_def -> BOOL IDENT LPAR loption(separated_nonempty_list(COMMA,params)) . RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On RPAR shift to state 95

State 95:
fun_def -> BOOL IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR . LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On LACC shift to state 96

State 96:
fun_def -> BOOL IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC . var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On INT shift to state 1
-- On BOOL shift to state 4
-- On var_decl_list shift to state 97
-- On var_decl shift to state 81

State 97:
fun_def -> BOOL IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list . list(instr) RACC [ VOID INT EOF BOOL ]
var_decl_list -> var_decl_list . var_decl [ WHILE RETURN RACC PUTCHAR INT IF IDENT BOOL ]
-- On WHILE shift to state 23
-- On RETURN shift to state 47
-- On PUTCHAR shift to state 50
-- On INT shift to state 1
-- On IF shift to state 55
-- On IDENT shift to state 60
-- On BOOL shift to state 4
-- On var_decl shift to state 78
-- On list(instr) shift to state 98
-- On instr shift to state 74
-- On RACC reduce production list(instr) -> 

State 98:
fun_def -> BOOL IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) . RACC [ VOID INT EOF BOOL ]
-- On RACC shift to state 99

State 99:
fun_def -> BOOL IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC . [ VOID INT EOF BOOL ]
-- On VOID reduce production fun_def -> BOOL IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 
-- On INT reduce production fun_def -> BOOL IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 
-- On EOF reduce production fun_def -> BOOL IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 
-- On BOOL reduce production fun_def -> BOOL IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC 

State 100:
fun_def_list -> fun_def_list . fun_def [ VOID INT EOF BOOL ]
prog -> var_decl_list fun_def_list . EOF [ # ]
-- On VOID shift to state 8
-- On INT shift to state 101
-- On EOF shift to state 103
-- On BOOL shift to state 104
-- On fun_def shift to state 106

State 101:
fun_def -> INT . IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On IDENT shift to state 102

State 102:
fun_def -> INT IDENT . LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On LPAR shift to state 84

State 103:
prog -> var_decl_list fun_def_list EOF . [ # ]
-- On # reduce production prog -> var_decl_list fun_def_list EOF 

State 104:
fun_def -> BOOL . IDENT LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On IDENT shift to state 105

State 105:
fun_def -> BOOL IDENT . LPAR loption(separated_nonempty_list(COMMA,params)) RPAR LACC var_decl_list list(instr) RACC [ VOID INT EOF BOOL ]
-- On LPAR shift to state 93

State 106:
fun_def_list -> fun_def_list fun_def . [ VOID INT EOF BOOL ]
-- On VOID reduce production fun_def_list -> fun_def_list fun_def 
-- On INT reduce production fun_def_list -> fun_def_list fun_def 
-- On EOF reduce production fun_def_list -> fun_def_list fun_def 
-- On BOOL reduce production fun_def_list -> fun_def_list fun_def 

State 107:
fun_def_list -> fun_def . [ VOID INT EOF BOOL ]
-- On VOID reduce production fun_def_list -> fun_def 
-- On INT reduce production fun_def_list -> fun_def 
-- On EOF reduce production fun_def_list -> fun_def 
-- On BOOL reduce production fun_def_list -> fun_def 

State 108:
prog' -> prog . [ # ]
-- On # accept prog

